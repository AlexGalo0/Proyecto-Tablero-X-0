/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Cristal Padilla
 */
public class ModoComputador extends javax.swing.JFrame {

    /**
     * Creates new form ModoComputador
     */
    public ModoComputador() {
        initComponents();
        setSize(700,700);
        setLocationRelativeTo(null);
       
    }

    private ModoComputador(int i, int i0) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        p1 = new javax.swing.JButton();
        p2 = new javax.swing.JButton();
        p3 = new javax.swing.JButton();
        p4 = new javax.swing.JButton();
        p5 = new javax.swing.JButton();
        p6 = new javax.swing.JButton();
        p7 = new javax.swing.JButton();
        p8 = new javax.swing.JButton();
        p9 = new javax.swing.JButton();
        BarraMenu = new javax.swing.JMenuBar();
        MenuJuego = new javax.swing.JMenu();
        ComenzarDeNuevo = new javax.swing.JMenuItem();
        MostrarResultados = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Salir = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Panel.setLayout(new java.awt.GridLayout(3, 3));

        p1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p1ActionPerformed(evt);
            }
        });
        Panel.add(p1);

        p2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2ActionPerformed(evt);
            }
        });
        Panel.add(p2);

        p3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p3ActionPerformed(evt);
            }
        });
        Panel.add(p3);

        p4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p4ActionPerformed(evt);
            }
        });
        Panel.add(p4);

        p5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p5ActionPerformed(evt);
            }
        });
        Panel.add(p5);

        p6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p6ActionPerformed(evt);
            }
        });
        Panel.add(p6);

        p7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p7ActionPerformed(evt);
            }
        });
        Panel.add(p7);

        p8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p8ActionPerformed(evt);
            }
        });
        Panel.add(p8);

        p9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p9ActionPerformed(evt);
            }
        });
        Panel.add(p9);

        MenuJuego.setText("Juego");
        MenuJuego.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N

        ComenzarDeNuevo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ComenzarDeNuevo.setText("Comenzar de Nuevo");
        ComenzarDeNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComenzarDeNuevoActionPerformed(evt);
            }
        });
        MenuJuego.add(ComenzarDeNuevo);

        MostrarResultados.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MostrarResultados.setText("Mostrar Tabla de Resultados");
        MostrarResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarResultadosActionPerformed(evt);
            }
        });
        MenuJuego.add(MostrarResultados);
        MenuJuego.add(jSeparator1);

        Salir.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        MenuJuego.add(Salir);

        BarraMenu.add(MenuJuego);

        menuAyuda.setText("Ayuda");
        menuAyuda.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        menuAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAyudaMouseClicked(evt);
            }
        });
        BarraMenu.add(menuAyuda);

        setJMenuBar(BarraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 int v1, v2, v3, v4, v5, v6, v7, v8, v9;
    boolean done = false;
    boolean fin = false;
//Metodo para dibujar la X cuando se presione sobre el boton

    private void dibujarX(JButton boton) {

        boton.setIcon(new ImageIcon(getClass().getResource("/Imagenes/x.png")));
    }
    //Metodo para dibujar la O cuando se presione sobre el boton

    private void dibujarO(JButton boton) {
        boton.setIcon(new ImageIcon(getClass().getResource("/Imagenes/o.jpg")));
    }

    
    void reset() {
        v1 = 0;
        v2 = 0;
        v3 = 0;
        v4 = 0;
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        p1.setIcon(null);
        p2.setIcon(null);
        p3.setIcon(null);
        p4.setIcon(null);
        p5.setIcon(null);
        p6.setIcon(null);
        p7.setIcon(null);
        p8.setIcon(null);
        p9.setIcon(null);
        p1.setEnabled(true);
        p2.setEnabled(true);
        p3.setEnabled(true);
        p4.setEnabled(true);
        p5.setEnabled(true);
        p6.setEnabled(true);
        p7.setEnabled(true);
        p8.setEnabled(true);
        p9.setEnabled(true);
        done = false;
        fin = false;
    }

    void Marc(int jugador, int poss) {

        switch (jugador) {
            case 1:
                switch (poss) {

                    case 1:
                        v1 = 1;
                        dibujarX(p1);
                        p1.setEnabled(false);
                        break;
                    case 2:
                        v2 = 1;
                        dibujarX(p2);
                        p2.setEnabled(false);
                        break;
                    case 3:
                        v3 = 1;
                        dibujarX(p3);
                        p3.setEnabled(false);
                        break;
                    case 4:
                        v4 = 1;
                        dibujarX(p4);
                        p4.setEnabled(false);
                        break;
                    case 5:
                        v5 = 1;
                        dibujarX(p5);
                        p5.setEnabled(false);
                        break;
                    case 6:
                        v6 = 1;
                        dibujarX(p6);
                        p6.setEnabled(false);
                        break;
                    case 7:
                        v7 = 1;
                        dibujarX(p7);
                        p7.setEnabled(false);
                        break;
                    case 8:
                        v8 = 1;
                        dibujarX(p8);
                        p8.setEnabled(false);
                        break;
                    case 9:
                        v9 = 1;
                        dibujarX(p9);
                        p9.setEnabled(false);
                        break;
                }
                break;

            case 2:
                switch (poss) {
                    case 1:
                        v1 = 2;
                        dibujarO(p1);
                        p1.setEnabled(false);
                        break;
                    case 2:
                        v2 = 2;
                        dibujarO(p2);
                        p2.setEnabled(false);
                        break;
                    case 3:
                        v3 = 2;
                        dibujarO(p3);
                        p3.setEnabled(false);
                        break;
                    case 4:
                        v4 = 2;
                        dibujarO(p4);
                        p4.setEnabled(false);
                        break;
                    case 5:
                        v5 = 2;
                        dibujarO(p5);
                        p5.setEnabled(false);
                        break;
                    case 6:
                        v6 = 2;
                        dibujarO(p6);
                        p6.setEnabled(false);
                        break;
                    case 7:
                        v7 = 2;
                        dibujarO(p7);
                        p7.setEnabled(false);
                        break;
                    case 8:
                        v8 = 2;
                        dibujarO(p8);
                        p8.setEnabled(false);
                        break;
                    case 9:
                        v9 = 2;
                        dibujarO(p9);
                        p9.setEnabled(false);
                        break;

                }
                break;

        }
    }

    boolean winner(int player) {

        boolean gano = false;

        switch (player) {

            case 1:
                if (v1 == 1 && v2 == 1 && v3 == 1) {
                    gano = true;
                }
                if (v4 == 1 && v5 == 1 && v6 == 1) {
                    gano = true;
                }
                if (v7 == 1 && v8 == 1 && v9 == 1) {
                    gano = true;
                }
                if (v1 == 1 && v4 == 1 && v7 == 1) {
                    gano = true;
                }
                if (v2 == 1 && v5 == 1 && v8 == 1) {
                    gano = true;
                }
                if (v3 == 1 && v6 == 1 && v9 == 1) {
                    gano = true;
                }
                if (v1 == 1 && v5 == 1 && v9 == 1) {
                    gano = true;
                }
                if (v3 == 1 && v5 == 1 && v7 == 1) {
                    gano = true;
                }
                break;

            case 2:
                if (v1 == 2 && v2 == 2 && v3 == 2) {
                    gano = true;
                }
                if (v4 == 2 && v5 == 2 && v6 == 2) {
                    gano = true;
                }
                if (v7 == 2 && v8 == 2 && v9 == 2) {
                    gano = true;
                }
                if (v1 == 2 && v4 == 2 && v7 == 2) {
                    gano = true;
                }
                if (v2 == 2 && v5 == 2 && v8 == 2) {
                    gano = true;
                }
                if (v3 == 2 && v6 == 2 && v9 == 2) {
                    gano = true;
                }
                if (v1 == 2 && v5 == 2 && v9 == 2) {
                    gano = true;
                }
                if (v3 == 2 && v5 == 2 && v7 == 2) {
                    gano = true;
                }
                break;

        }
        return gano;
    }

    void bloqueo() {
        //primera fila horizontal
        if (v1 == 2 && v2 == 2 && v3 == 0 && !done) {
            Marc(1, 3);
            done = true;
        }
        if (v1 == 2 && v2 == 0 && v3 == 2 && !done) {
            Marc(1, 2);
            done = true;

        }
        if (v1 == 0 && v2 == 2 && v3 == 2 && !done) {
            Marc(1, 1);
            done = true;
        }

        //segunda fila horizontal
        if (v4 == 2 && v5 == 2 && v6 == 0 && !done) {
            Marc(1, 6);
            done = true;
        }
        if (v4 == 2 && v5 == 0 && v6 == 2 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v4 == 0 && v5 == 2 && v6 == 2 && !done) {
            Marc(1, 4);
            done = true;
        }
        //tercera fila horizontal
        if (v7 == 2 && v8 == 2 && v9 == 0 && !done) {
            Marc(1, 9);
            done = true;
        }
        if (v7 == 2 && v8 == 0 && v9 == 2 && !done) {
            Marc(1, 8);
            done = true;
        }
        if (v7 == 0 && v8 == 2 && v9 == 2 && !done) {
            Marc(1, 7);
            done = true;
        }
        //primera vertical
        if (v1 == 2 && v4 == 2 && v7 == 0 && !done) {
            Marc(1, 7);
            done = true;
        }
        if (v1 == 2 && v4 == 0 && v7 == 2 && !done) {
            Marc(1, 4);
            done = true;
        }
        if (v1 == 0 && v4 == 2 && v7 == 2 && !done) {
            Marc(1, 1);
            done = true;
        }
        //segunda vertical
        if (v2 == 2 && v5 == 2 && v8 == 0 && !done) {
            Marc(1, 8);
            done = true;
        }
        if (v2 == 2 && v5 == 0 && v8 == 2 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v2 == 0 && v5 == 2 && v8 == 2 && !done) {
            Marc(1, 2);
            done = true;
        }
        //tercera vertical
        if (v3 == 2 && v6 == 2 && v9 == 0 && !done) {
            Marc(1, 9);
            done = true;
        }
        if (v3 == 2 && v6 == 0 && v9 == 2 && !done) {
            Marc(1, 6);
            done = true;
        }
        if (v3 == 0 && v6 == 2 && v9 == 2 && !done) {
            Marc(1, 3);
            done = true;
        }
        //primera diagonal
        if (v1 == 2 && v5 == 2 && v9 == 0 && !done) {
            Marc(1, 9);
            done = true;
        }
        if (v1 == 2 && v5 == 0 && v9 == 2 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v1 == 0 && v5 == 2 && v9 == 2 && !done) {
            Marc(1, 1);
            done = true;
        }
        //segunda diagonal
        if (v3 == 2 && v5 == 2 && v7 == 0 && !done) {
            Marc(1, 7);
            done = true;
        }
        if (v3 == 2 && v5 == 0 && v7 == 2 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v3 == 0 && v5 == 2 && v7 == 2 && !done) {
            Marc(1, 3);
            done = true;

        }

    }

  
    void ganar() {
        //

        if (v1 == 1 && v2 == 1 && v3 == 0 && !done) {
            Marc(1, 3);

            done = true;
        }
        if (v1 == 1 && v2 == 0 && v3 == 1 && !done) {
            Marc(1, 2);
            done = true;

        }
        if (v1 == 0 && v2 == 1 && v3 == 1 && !done) {
            Marc(1, 1);
            done = true;
        }

        //segunda fila horizontal
        if (v4 == 1 && v5 == 1 && v6 == 0 && !done) {
            Marc(1, 6);
            done = true;
        }
        if (v4 == 1 && v5 == 0 && v6 == 1 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v4 == 0 && v5 == 1 && v6 == 1 && !done) {
            Marc(1, 4);
            done = true;
        }
        //tercera fila horizontal
        if (v7 == 1 && v8 == 1 && v9 == 0 && !done) {
            Marc(1, 9);
            done = true;
        }
        if (v7 == 1 && v8 == 0 && v9 == 1 && !done) {
            Marc(1, 8);
            done = true;
        }
        if (v7 == 0 && v8 == 1 && v9 == 1 && !done) {
            Marc(1, 7);
            done = true;
        }
        //primera vertical
        if (v1 == 1 && v4 == 1 && v7 == 0 && !done) {
            Marc(1, 7);
            done = true;
        }
        if (v1 == 1 && v4 == 0 && v7 == 1 && !done) {
            Marc(1, 4);
            done = true;
        }
        if (v1 == 0 && v4 == 1 && v7 == 1 && !done) {
            Marc(1, 1);
            done = true;
        }
        //segunda vertical
        if (v2 == 1 && v5 == 1 && v8 == 0 && !done) {
            Marc(1, 8);
            done = true;
        }
        if (v2 == 1 && v5 == 0 && v8 == 1 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v2 == 0 && v5 == 1 && v8 == 1 && !done) {
            Marc(1, 2);
            done = true;
        }
        //tercera vertical
        if (v3 == 1 && v6 == 1 && v9 == 0 && !done) {
            Marc(1, 9);
            done = true;
        }
        if (v3 == 1 && v6 == 0 && v9 == 1 && !done) {
            Marc(1, 6);
            done = true;
        }
        if (v3 == 0 && v6 == 1 && v9 == 1 && !done) {
            Marc(1, 3);

            done = true;
        }
        //primera diagonal
        if (v1 == 1 && v5 == 1 && v9 == 0 && !done) {
            Marc(1, 9);
            done = true;
        }
        if (v1 == 1 && v5 == 0 && v9 == 1 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v1 == 0 && v5 == 1 && v9 == 1 && !done) {
            Marc(1, 1);
            done = true;
        }
        //segunda diagonal
        if (v3 == 1 && v5 == 1 && v7 == 0 && !done) {
            Marc(1, 7);
            done = true;
        }
        if (v3 == 1 && v5 == 0 && v7 == 1 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v3 == 0 && v5 == 1 && v7 == 1 && !done) {
            Marc(1, 3);

            done = true;
        }

    }

    void centro() {

        if (v5 == 0 && !done) {
            Marc(1, 5);
            done = true;
        }

    }

    void recorrer() {
        if (v1 == 0 && !done) {
            Marc(1, 1);
            done = true;
        }
        if (v2 == 0 && !done) {
            Marc(1, 2);
            done = true;
            System.out.println("2");
        }
        if (v3 == 0 && !done) {
            Marc(1, 3);
            done = true;
            System.out.println("3");
        }
        if (v4 == 0 && !done) {
            Marc(1, 4);
            done = true;
        }
        if (v5 == 0 && !done) {
            Marc(1, 5);
            done = true;
        }
        if (v6 == 0 && !done) {
            Marc(1, 6);
            done = true;
        }
        if (v7 == 0 && !done) {
            Marc(1, 7);
            done = true;
        }
        if (v8 == 0 && !done) {
            Marc(1, 8);
            done = true;
        }
        if (v9 == 0 && !done) {
            Marc(1, 9);
            done = true;
        }

    }

    void allBloqueo() {
        if (v4 == 2 && v5 == 1 && v9 == 2 && v7 == 0 && !done) {
            Marc(1, 7);
            done = true;
        }
        if (v1 == 2 && v5 == 1 && v9 == 2 && v8 == 0 && !done) {
            Marc(1, 8);
            done = true;
        }
        if (v3 == 2 && v5 == 1 && v7 == 2 && v4 == 0 && !done) {
            Marc(1, 4);
            done = true;
        }
        if (v3 == 2 && v5 == 1 && v8 == 2 && v6 == 0 && !done) {
            Marc(1, 6);
            done = true;
        }
        if (v1 == 2 && v5 == 1 && v8 == 2 && v7 == 0 && !done) {
            Marc(1, 7);
            done = true;
        }

    }

    void machine() {
        //se marca que no hay ningun tiro realizado por parte de la makina
        //done cambia a true cuando la makina tire
        done = false;
        fin = false;
        //se almacena en gano el valor que recibe winner
        boolean gano = winner(2);

        //comprueba si el jugador gano
        if (gano) {
            JOptionPane.showMessageDialog(null, "Ganaste", "   ", JOptionPane.PLAIN_MESSAGE);
            reset();
            fin = true;
        }

        //esta funcion comprueba si puede ganar
        if (!done && !fin) {

            ganar();
        }

        //intenta bloquear los tiros del ususario en caso de uqe se pueda
        if (!done && !fin) {
            bloqueo();

        }

        //tira en el centro en caso de que este vacio
        if (!done && !fin) {
            centro();
        }

        if (!done && !fin) {
            allBloqueo();
        }

        //si no puedo hacer nada de lo anterior
        if (!done && !fin && v3 == 0) {
            Marc(1, 3);
            done = true;
        }
        //funcion  de comprobacion de casillas vacias

        if (!done && !fin) {
            recorrer();
        }

//comprueba si yo(makina) gane
        if (done && !fin) {
            gano = winner(1);
            if (gano) {
                JOptionPane.showMessageDialog(null, "Gane! prueba de nuevo", "", JOptionPane.PLAIN_MESSAGE);

                fin = true;
                reset();
            }

        }

        if (v1 != 0 && v2 != 0 && v3 != 0 && v4 != 0 && v5 != 0 && v6 != 0 && v7 != 0 && v8 != 0 && v9 != 0) {
             VentanaEmpate ventanaEmpate = new VentanaEmpate(this, true);
               ventanaEmpate.setVisible(true);
            reset();
        }

    }


    private void ComenzarDeNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComenzarDeNuevoActionPerformed


    }//GEN-LAST:event_ComenzarDeNuevoActionPerformed

    private void MostrarResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarResultadosActionPerformed

    }//GEN-LAST:event_MostrarResultadosActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        VentanaSalir ventana = new VentanaSalir(true);
        ventana.setVisible(true);
    }//GEN-LAST:event_SalirActionPerformed

    private void menuAyudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAyudaMouseClicked
        VentanasIntegrantesyAño ventanita = new VentanasIntegrantesyAño(true);
        ventanita.setVisible(true);
        ventanita.setLocationRelativeTo(null);
    }//GEN-LAST:event_menuAyudaMouseClicked

    private void p1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p1ActionPerformed
        Marc(2, 1);
        machine();
    }//GEN-LAST:event_p1ActionPerformed

    private void p2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2ActionPerformed
        Marc(2, 2);
        machine();
    }//GEN-LAST:event_p2ActionPerformed

    private void p3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p3ActionPerformed
        Marc(2, 3);
        machine();
    }//GEN-LAST:event_p3ActionPerformed

    private void p4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p4ActionPerformed
        Marc(2, 4);
        machine();
    }//GEN-LAST:event_p4ActionPerformed

    private void p5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p5ActionPerformed
        Marc(2, 5);
        machine();
    }//GEN-LAST:event_p5ActionPerformed

    private void p6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p6ActionPerformed
        Marc(2, 6);
        machine();

    }//GEN-LAST:event_p6ActionPerformed

    private void p7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p7ActionPerformed

        Marc(2, 7);
        machine();
    }//GEN-LAST:event_p7ActionPerformed

    private void p8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p8ActionPerformed
        Marc(2, 8);
        machine();
    }//GEN-LAST:event_p8ActionPerformed

    private void p9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p9ActionPerformed
        Marc(2, 9);
        machine();
    }//GEN-LAST:event_p9ActionPerformed

    /**
     * @param args the command line arguments
     */
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar BarraMenu;
    private javax.swing.JMenuItem ComenzarDeNuevo;
    private javax.swing.JMenu MenuJuego;
    private javax.swing.JMenuItem MostrarResultados;
    private javax.swing.JPanel Panel;
    private javax.swing.JMenuItem Salir;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JButton p1;
    private javax.swing.JButton p2;
    private javax.swing.JButton p3;
    private javax.swing.JButton p4;
    private javax.swing.JButton p5;
    private javax.swing.JButton p6;
    private javax.swing.JButton p7;
    private javax.swing.JButton p8;
    private javax.swing.JButton p9;
    // End of variables declaration//GEN-END:variables
}
